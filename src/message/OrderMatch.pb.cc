// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OrderMatch.proto

#include "OrderMatch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace message {
class OrderMatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderMatch>
      _instance;
} _OrderMatch_default_instance_;
}  // namespace message
namespace protobuf_OrderMatch_2eproto {
static void InitDefaultsOrderMatch() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_OrderMatch_default_instance_;
    new (ptr) ::message::OrderMatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::OrderMatch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OrderMatch =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOrderMatch}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_OrderMatch.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::OrderMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::OrderMatch, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::OrderMatch, sellorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::OrderMatch, askprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::OrderMatch, matchedquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::OrderMatch, buyorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::message::OrderMatch, bidprice_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::message::OrderMatch)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::message::_OrderMatch_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "OrderMatch.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020OrderMatch.proto\022\007message\"\202\001\n\nOrderMat"
      "ch\022\016\n\006symbol\030\001 \001(\t\022\023\n\013sellOrderId\030\002 \001(\t\022"
      "\020\n\010askPrice\030\003 \001(\001\022\027\n\017matchedQuantity\030\004 \001"
      "(\004\022\022\n\nbuyOrderId\030\005 \001(\t\022\020\n\010bidPrice\030\006 \001(\001"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 168);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OrderMatch.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_OrderMatch_2eproto
namespace message {

// ===================================================================

void OrderMatch::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderMatch::kSymbolFieldNumber;
const int OrderMatch::kSellOrderIdFieldNumber;
const int OrderMatch::kAskPriceFieldNumber;
const int OrderMatch::kMatchedQuantityFieldNumber;
const int OrderMatch::kBuyOrderIdFieldNumber;
const int OrderMatch::kBidPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderMatch::OrderMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_OrderMatch_2eproto::scc_info_OrderMatch.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.OrderMatch)
}
OrderMatch::OrderMatch(const OrderMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  sellorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sellorderid().size() > 0) {
    sellorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sellorderid_);
  }
  buyorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.buyorderid().size() > 0) {
    buyorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buyorderid_);
  }
  ::memcpy(&askprice_, &from.askprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&bidprice_) -
    reinterpret_cast<char*>(&askprice_)) + sizeof(bidprice_));
  // @@protoc_insertion_point(copy_constructor:message.OrderMatch)
}

void OrderMatch::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sellorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&askprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bidprice_) -
      reinterpret_cast<char*>(&askprice_)) + sizeof(bidprice_));
}

OrderMatch::~OrderMatch() {
  // @@protoc_insertion_point(destructor:message.OrderMatch)
  SharedDtor();
}

void OrderMatch::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sellorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OrderMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OrderMatch::descriptor() {
  ::protobuf_OrderMatch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_OrderMatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OrderMatch& OrderMatch::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_OrderMatch_2eproto::scc_info_OrderMatch.base);
  return *internal_default_instance();
}


void OrderMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:message.OrderMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sellorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&askprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bidprice_) -
      reinterpret_cast<char*>(&askprice_)) + sizeof(bidprice_));
  _internal_metadata_.Clear();
}

bool OrderMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.OrderMatch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "message.OrderMatch.symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sellOrderId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sellorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sellorderid().data(), static_cast<int>(this->sellorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "message.OrderMatch.sellOrderId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double askPrice = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 matchedQuantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchedquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string buyOrderId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->buyorderid().data(), static_cast<int>(this->buyorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "message.OrderMatch.buyOrderId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double bidPrice = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.OrderMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.OrderMatch)
  return false;
#undef DO_
}

void OrderMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.OrderMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.OrderMatch.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // string sellOrderId = 2;
  if (this->sellorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sellorderid().data(), static_cast<int>(this->sellorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.OrderMatch.sellOrderId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sellorderid(), output);
  }

  // double askPrice = 3;
  if (this->askprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->askprice(), output);
  }

  // uint64 matchedQuantity = 4;
  if (this->matchedquantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->matchedquantity(), output);
  }

  // string buyOrderId = 5;
  if (this->buyorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buyorderid().data(), static_cast<int>(this->buyorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.OrderMatch.buyOrderId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->buyorderid(), output);
  }

  // double bidPrice = 6;
  if (this->bidprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->bidprice(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:message.OrderMatch)
}

::google::protobuf::uint8* OrderMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:message.OrderMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.OrderMatch.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // string sellOrderId = 2;
  if (this->sellorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sellorderid().data(), static_cast<int>(this->sellorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.OrderMatch.sellOrderId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sellorderid(), target);
  }

  // double askPrice = 3;
  if (this->askprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->askprice(), target);
  }

  // uint64 matchedQuantity = 4;
  if (this->matchedquantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->matchedquantity(), target);
  }

  // string buyOrderId = 5;
  if (this->buyorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buyorderid().data(), static_cast<int>(this->buyorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "message.OrderMatch.buyOrderId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->buyorderid(), target);
  }

  // double bidPrice = 6;
  if (this->bidprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->bidprice(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.OrderMatch)
  return target;
}

size_t OrderMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.OrderMatch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string sellOrderId = 2;
  if (this->sellorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sellorderid());
  }

  // string buyOrderId = 5;
  if (this->buyorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->buyorderid());
  }

  // double askPrice = 3;
  if (this->askprice() != 0) {
    total_size += 1 + 8;
  }

  // uint64 matchedQuantity = 4;
  if (this->matchedquantity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->matchedquantity());
  }

  // double bidPrice = 6;
  if (this->bidprice() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.OrderMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.OrderMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.OrderMatch)
    MergeFrom(*source);
  }
}

void OrderMatch::MergeFrom(const OrderMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.OrderMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.sellorderid().size() > 0) {

    sellorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sellorderid_);
  }
  if (from.buyorderid().size() > 0) {

    buyorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buyorderid_);
  }
  if (from.askprice() != 0) {
    set_askprice(from.askprice());
  }
  if (from.matchedquantity() != 0) {
    set_matchedquantity(from.matchedquantity());
  }
  if (from.bidprice() != 0) {
    set_bidprice(from.bidprice());
  }
}

void OrderMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.OrderMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderMatch::CopyFrom(const OrderMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.OrderMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderMatch::IsInitialized() const {
  return true;
}

void OrderMatch::Swap(OrderMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderMatch::InternalSwap(OrderMatch* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sellorderid_.Swap(&other->sellorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  buyorderid_.Swap(&other->buyorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(askprice_, other->askprice_);
  swap(matchedquantity_, other->matchedquantity_);
  swap(bidprice_, other->bidprice_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OrderMatch::GetMetadata() const {
  protobuf_OrderMatch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_OrderMatch_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::message::OrderMatch* Arena::CreateMaybeMessage< ::message::OrderMatch >(Arena* arena) {
  return Arena::CreateInternal< ::message::OrderMatch >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
